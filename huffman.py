from queue import PriorityQueue
import numpy as np


class Node:
    def __init__(self, value, freq, left_child=None, right_child=None):
        self.value = value
        self.freq = freq
        self.left_child = left_child
        self.right_child = right_child

    def is_leaf(self):
        return self.value is not None

    def __lt__(self, other):
        return self.freq < other.freq

    def __repr__(self):
        return f'{self.value}: {self.freq:.4f}'


def compute_freq(arr):
    freq = {}
    for elem in arr:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq


def create_huffman_table(arr):
    # build huffman tree
    q = PriorityQueue()
    for val, freq in compute_freq(arr).items():
        q.put(Node(val, freq))
    if q.qsize() == 1:  # only one element
        return {q.get().value: '0'}
    while q.qsize() >= 2:
        u, v = q.get(), q.get()
        q.put(Node(None, u.freq + v.freq, u, v))
    root = q.get()
    # create bitstring table
    table = {}

    def traverse(current_node, bitstring=''):
        if current_node is None:
            return
        if current_node.is_leaf():
            table[current_node.value] = bitstring
            return
        traverse(current_node.left_child, bitstring + '0')
        traverse(current_node.right_child, bitstring + '1')

    traverse(root)
    # convert to canonical huffman code
    count, weigh = convert_huffman_table(table)
    c_table = reverse(canonical_huffman_table(count, weigh))
    return c_table


def canonical_huffman_table(count, weigh):
    """construct canonical Huffman table."""
    table, cur, index = {}, '', 0
    for i in range(16):
        cur = cur + '0'
        for j in range(count[i]):
            table[cur] = weigh[index]
            index += 1
            cur = f'{int(cur, 2) + 1:b}'
            cur = '0' * (i - len(cur) + 1) + cur
    return table


def convert_huffman_table(table):
    """convert huffman table to count and weigh"""
    # table[int] = string
    pairs = sorted(table.items(), key=lambda x: (len(x[1]), x[1]))
    weigh, codes = zip(*pairs)
    weigh = np.array(weigh, dtype=np.uint8)
    # count[i]: there are count[i] codes of length i+1
    count = np.zeros(16, dtype=np.uint8)
    for c in codes:
        count[len(c)-1] += 1
    return count, weigh


def read_huffman_code(table, stream):
    prefix = ''
    while prefix not in table:
        prefix += str(stream.read_bit())
    return table[prefix]


def reverse(table):
    return {v: k for k, v in table.items()}


# 4 recommended huffman tables in JPEG standard
# luminance DC
RM_Y_DC = {'00': 0, '010': 1, '011': 2, '100': 3, '101': 4, '110': 5,
           '1110': 6, '11110': 7, '111110': 8, '1111110': 9, '11111110': 10,
           '111111110': 11}

# luminance AC
RM_Y_AC = {'00': 1, '01': 2, '100': 3, '1010': 0, '1011': 4, '1100': 17,
           '11010': 5, '11011': 18, '11100': 33, '111010': 49, '111011': 65,
           '1111000': 6, '1111001': 19, '1111010': 81, '1111011': 97,
           '11111000': 7, '11111001': 34, '11111010': 113, '111110110': 20,
           '111110111': 50, '111111000': 129, '111111001': 145,
           '111111010': 161, '1111110110': 8, '1111110111': 35,
           '1111111000': 66, '1111111001': 177, '1111111010': 193,
           '11111110110': 21, '11111110111': 82, '11111111000': 209,
           '11111111001': 240, '111111110100': 36, '111111110101': 51,
           '111111110110': 98, '111111110111': 114, '111111111000000': 130,
           '1111111110000010': 9, '1111111110000011': 10,
           '1111111110000100': 22, '1111111110000101': 23,
           '1111111110000110': 24, '1111111110000111': 25,
           '1111111110001000': 26, '1111111110001001': 37,
           '1111111110001010': 38, '1111111110001011': 39,
           '1111111110001100': 40, '1111111110001101': 41,
           '1111111110001110': 42, '1111111110001111': 52,
           '1111111110010000': 53, '1111111110010001': 54,
           '1111111110010010': 55, '1111111110010011': 56,
           '1111111110010100': 57, '1111111110010101': 58,
           '1111111110010110': 67, '1111111110010111': 68,
           '1111111110011000': 69, '1111111110011001': 70,
           '1111111110011010': 71, '1111111110011011': 72,
           '1111111110011100': 73, '1111111110011101': 74,
           '1111111110011110': 83, '1111111110011111': 84,
           '1111111110100000': 85, '1111111110100001': 86,
           '1111111110100010': 87, '1111111110100011': 88,
           '1111111110100100': 89, '1111111110100101': 90,
           '1111111110100110': 99, '1111111110100111': 100,
           '1111111110101000': 101, '1111111110101001': 102,
           '1111111110101010': 103, '1111111110101011': 104,
           '1111111110101100': 105, '1111111110101101': 106,
           '1111111110101110': 115, '1111111110101111': 116,
           '1111111110110000': 117, '1111111110110001': 118,
           '1111111110110010': 119, '1111111110110011': 120,
           '1111111110110100': 121, '1111111110110101': 122,
           '1111111110110110': 131, '1111111110110111': 132,
           '1111111110111000': 133, '1111111110111001': 134,
           '1111111110111010': 135, '1111111110111011': 136,
           '1111111110111100': 137, '1111111110111101': 138,
           '1111111110111110': 146, '1111111110111111': 147,
           '1111111111000000': 148, '1111111111000001': 149,
           '1111111111000010': 150, '1111111111000011': 151,
           '1111111111000100': 152, '1111111111000101': 153,
           '1111111111000110': 154, '1111111111000111': 162,
           '1111111111001000': 163, '1111111111001001': 164,
           '1111111111001010': 165, '1111111111001011': 166,
           '1111111111001100': 167, '1111111111001101': 168,
           '1111111111001110': 169, '1111111111001111': 170,
           '1111111111010000': 178, '1111111111010001': 179,
           '1111111111010010': 180, '1111111111010011': 181,
           '1111111111010100': 182, '1111111111010101': 183,
           '1111111111010110': 184, '1111111111010111': 185,
           '1111111111011000': 186, '1111111111011001': 194,
           '1111111111011010': 195, '1111111111011011': 196,
           '1111111111011100': 197, '1111111111011101': 198,
           '1111111111011110': 199, '1111111111011111': 200,
           '1111111111100000': 201, '1111111111100001': 202,
           '1111111111100010': 210, '1111111111100011': 211,
           '1111111111100100': 212, '1111111111100101': 213,
           '1111111111100110': 214, '1111111111100111': 215,
           '1111111111101000': 216, '1111111111101001': 217,
           '1111111111101010': 218, '1111111111101011': 225,
           '1111111111101100': 226, '1111111111101101': 227,
           '1111111111101110': 228, '1111111111101111': 229,
           '1111111111110000': 230, '1111111111110001': 231,
           '1111111111110010': 232, '1111111111110011': 233,
           '1111111111110100': 234, '1111111111110101': 241,
           '1111111111110110': 242, '1111111111110111': 243,
           '1111111111111000': 244, '1111111111111001': 245,
           '1111111111111010': 246, '1111111111111011': 247,
           '1111111111111100': 248, '1111111111111101': 249,
           '1111111111111110': 250}

# chroma DC
RM_C_DC = {'00': 0, '01': 1, '10': 2, '110': 3, '1110': 4, '11110': 5,
           '111110': 6, '1111110': 7, '11111110': 8, '111111110': 9,
           '1111111110': 10, '11111111110': 11}

# chroma AC
RM_C_AC = {'00': 0, '01': 1, '100': 2, '1010': 3, '1011': 17, '11000': 4,
           '11001': 5, '11010': 33, '11011': 49, '111000': 6, '111001': 18,
           '111010': 65, '111011': 81, '1111000': 7, '1111001': 97,
           '1111010': 113, '11110110': 19, '11110111': 34, '11111000': 50,
           '11111001': 129, '111110100': 8, '111110101': 20, '111110110': 66,
           '111110111': 145, '111111000': 161, '111111001': 177,
           '111111010': 193, '1111110110': 9, '1111110111': 35,
           '1111111000': 51, '1111111001': 82, '1111111010': 240,
           '11111110110': 21, '11111110111': 98, '11111111000': 114,
           '11111111001': 209, '111111110100': 10, '111111110101': 22,
           '111111110110': 36, '111111110111': 52, '11111111100000': 225,
           '111111111000010': 37, '111111111000011': 241,
           '1111111110001000': 23, '1111111110001001': 24,
           '1111111110001010': 25, '1111111110001011': 26,
           '1111111110001100': 38, '1111111110001101': 39,
           '1111111110001110': 40, '1111111110001111': 41,
           '1111111110010000': 42, '1111111110010001': 53,
           '1111111110010010': 54, '1111111110010011': 55,
           '1111111110010100': 56, '1111111110010101': 57,
           '1111111110010110': 58, '1111111110010111': 67,
           '1111111110011000': 68, '1111111110011001': 69,
           '1111111110011010': 70, '1111111110011011': 71,
           '1111111110011100': 72, '1111111110011101': 73,
           '1111111110011110': 74, '1111111110011111': 83,
           '1111111110100000': 84, '1111111110100001': 85,
           '1111111110100010': 86, '1111111110100011': 87,
           '1111111110100100': 88, '1111111110100101': 89,
           '1111111110100110': 90, '1111111110100111': 99,
           '1111111110101000': 100, '1111111110101001': 101,
           '1111111110101010': 102, '1111111110101011': 103,
           '1111111110101100': 104, '1111111110101101': 105,
           '1111111110101110': 106, '1111111110101111': 115,
           '1111111110110000': 116, '1111111110110001': 117,
           '1111111110110010': 118, '1111111110110011': 119,
           '1111111110110100': 120, '1111111110110101': 121,
           '1111111110110110': 122, '1111111110110111': 130,
           '1111111110111000': 131, '1111111110111001': 132,
           '1111111110111010': 133, '1111111110111011': 134,
           '1111111110111100': 135, '1111111110111101': 136,
           '1111111110111110': 137, '1111111110111111': 138,
           '1111111111000000': 146, '1111111111000001': 147,
           '1111111111000010': 148, '1111111111000011': 149,
           '1111111111000100': 150, '1111111111000101': 151,
           '1111111111000110': 152, '1111111111000111': 153,
           '1111111111001000': 154, '1111111111001001': 162,
           '1111111111001010': 163, '1111111111001011': 164,
           '1111111111001100': 165, '1111111111001101': 166,
           '1111111111001110': 167, '1111111111001111': 168,
           '1111111111010000': 169, '1111111111010001': 170,
           '1111111111010010': 178, '1111111111010011': 179,
           '1111111111010100': 180, '1111111111010101': 181,
           '1111111111010110': 182, '1111111111010111': 183,
           '1111111111011000': 184, '1111111111011001': 185,
           '1111111111011010': 186, '1111111111011011': 194,
           '1111111111011100': 195, '1111111111011101': 196,
           '1111111111011110': 197, '1111111111011111': 198,
           '1111111111100000': 199, '1111111111100001': 200,
           '1111111111100010': 201, '1111111111100011': 202,
           '1111111111100100': 210, '1111111111100101': 211,
           '1111111111100110': 212, '1111111111100111': 213,
           '1111111111101000': 214, '1111111111101001': 215,
           '1111111111101010': 216, '1111111111101011': 217,
           '1111111111101100': 218, '1111111111101101': 226,
           '1111111111101110': 227, '1111111111101111': 228,
           '1111111111110000': 229, '1111111111110001': 230,
           '1111111111110010': 231, '1111111111110011': 232,
           '1111111111110100': 233, '1111111111110101': 234,
           '1111111111110110': 242, '1111111111110111': 243,
           '1111111111111000': 244, '1111111111111001': 245,
           '1111111111111010': 246, '1111111111111011': 247,
           '1111111111111100': 248, '1111111111111101': 249,
           '1111111111111110': 250}
